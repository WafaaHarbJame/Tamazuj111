package com.Tamazj.TamazjApp;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import com.Tamazj.TamazjApp.Api.MyApplication;import com.Tamazj.TamazjApp.Fragments.CategoriesFragment;import com.Tamazj.TamazjApp.Fragments.HomeFragment;import com.Tamazj.TamazjApp.Fragments.MenuUserFragment;import com.Tamazj.TamazjApp.Fragments.MyConsultationragment;import com.Tamazj.TamazjApp.Model.AppConstants;import com.android.volley.AuthFailureError;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.verbosetech.yoohoo.activities.SignInActivity;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.Locale;import java.util.Map;public class MainActivity extends AppCompatActivity {    private TextView mTextMessage;    ImageView selectcatogory;    SharedPreferences sharedPreferences;    String choosing_langauge;    SharedPreferences.Editor editor_signUp;    String token;    String userphone;    String username;    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener = new BottomNavigationView.OnNavigationItemSelectedListener() {        @Override        public boolean onNavigationItemSelected(@NonNull MenuItem item) {            switch (item.getItemId()) {                case R.id.navigation_home:                    getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new HomeFragment(), "HomeFragment").commit();                    return true;                case R.id.navigation_astshat:                    getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new MyConsultationragment(), "HomeFragment").commit();                    return true;                case R.id.navigation_menu:                    getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new CategoriesFragment(), "HomeFragment").commit();                    return true;                case R.id.navigation_homeprofile:                    getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new MenuUserFragment(), "HomeFragment").commit();                    return true;            }            return false;        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        BottomNavigationView navView = findViewById(R.id.nav_view);        sharedPreferences = getSharedPreferences(AppConstants.KEY_SIGN_UP, MODE_PRIVATE);        Configuration config = new Configuration();        if (sharedPreferences != null) {            token = sharedPreferences.getString(AppConstants.token, "default value");            choosing_langauge = sharedPreferences.getString(AppConstants.LANG_choose, "");            ConnectivityManager conMgr = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo networkInfo = conMgr.getActiveNetworkInfo();            if (networkInfo != null && networkInfo.isConnected()) {                if (sharedPreferences != null) {                    if (sharedPreferences.getString(AppConstants.LANG_choose, null) != null) {                        choosing_langauge = sharedPreferences.getString(AppConstants.LANG_choose, "");                        getUserProfile(token, choosing_langauge);                    }                }            } else {                Toast.makeText(MainActivity.this, "" + getString(R.string.no_internet), Toast.LENGTH_SHORT).show();            }        }        if (sharedPreferences != null) {            if (sharedPreferences.getString(AppConstants.LANG_choose, null) != null) {                choosing_langauge = sharedPreferences.getString(AppConstants.LANG_choose, "");                if (choosing_langauge.matches("ar")) {                    Locale arabic = new Locale("ar", "ar");                    config.locale = arabic;                    getResources().updateConfiguration(config, null);                } else {                    Locale arabic = new Locale("ar", "ar");                    config.locale = arabic;                    getResources().updateConfiguration(config, null);                }            }        }        mTextMessage = findViewById(R.id.message);        selectcatogory=findViewById(R.id.selectcatogory);        selectcatogory.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(MainActivity.this, SignInActivity.class);                startActivity(intent);                //getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new CategorySelectionFragment(), "HomeFragment").commit();            }        });        navView.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);        navView.setItemIconTintList(null);        getSupportFragmentManager().beginTransaction().replace(R.id.mainContainer, new HomeFragment(), "HomeFragment").commit();    }    public void getUserProfile(final String token, final String lang) {        StringRequest stringRequest = new StringRequest(Request.Method.POST, AppConstants.USER_PROFILE, new Response.Listener<String>() {            @Override            public void onResponse(String response) {                Log.e("HZM", response);                try {                    JSONObject task_respnse = new JSONObject(response);                    JSONObject taskarray = task_respnse.getJSONObject("data");                    userphone = taskarray.getString("phone");                    username = taskarray.getString("name");                    sharedPreferences = getSharedPreferences(AppConstants.KEY_SIGN_UP, MODE_PRIVATE);                    editor_signUp = sharedPreferences.edit();                    editor_signUp.putString(AppConstants.USER_PHONE, userphone);                    editor_signUp.putString(AppConstants.USER_NAME, username);                    editor_signUp.apply();                    editor_signUp.commit();                } catch (JSONException e1) {                    e1.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {            }        }) {            @Override            protected Map<String, String> getParams() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                headers.put("Authorization", "Bearer" + "  " + token);                return headers;            }            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<>();                headers.put("Authorization", "Bearer" + "  " + token);                headers.put("lang", lang);                return headers;            }            ;        };        MyApplication.getInstance().addToRequestQueue(stringRequest);    }}